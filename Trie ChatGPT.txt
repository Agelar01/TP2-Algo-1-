class TrieNode {
    TrieNode[] children;
    boolean isEndOfWord;

    public TrieNode() {
        this.children = new TrieNode[26]; // Para el alfabeto inglés
        this.isEndOfWord = false;
    }
}

class Trie {
    private TrieNode root;

    public Trie() {
        this.root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode current = root;
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a'; // Asignación de índice según el carácter
            if (current.children[index] == null) {
                current.children[index] = new TrieNode();
            }
            current = current.children[index];
        }
        current.isEndOfWord = true;
    }

    public boolean search(String word) {
        TrieNode current = root;
        for (int i = 0; i < word.length(); i++) {
            int index = word.charAt(i) - 'a';
            if (current.children[index] == null) {
                return false;
            }
            current = current.children[index];
        }
        return current != null && current.isEndOfWord;
    }

    public boolean startsWith(String prefix) {
        TrieNode current = root;
        for (int i = 0; i < prefix.length(); i++) {
            int index = prefix.charAt(i) - 'a';
            if (current.children[index] == null) {
                return false;
            }
            current = current.children[index];
        }
        return true;
    }

    public boolean delete(String word) {
        return deleteHelper(root, word, 0);
    }

    private boolean deleteHelper(TrieNode current, String word, int index) {
        if (index == word.length()) {
            if (!current.isEndOfWord) {
                return false; // La palabra no está en el trie
            }
            current.isEndOfWord = false;
            return allChildrenNull(current); // Verificar si el nodo actual tiene hijos
        }
        int charIndex = word.charAt(index) - 'a';
        if (current.children[charIndex] == null) {
            return false; // La palabra no está en el trie
        }
        boolean shouldDeleteCurrentNode = deleteHelper(current.children[charIndex], word, index + 1);
        if (shouldDeleteCurrentNode) {
            current.children[charIndex] = null;
            return allChildrenNull(current);
        }
        return false;
    }

    private boolean allChildrenNull(TrieNode node) {
        for (TrieNode child : node.children) {
            if (child != null) {
                return false;
            }
        }
        return true;
    }
}

public class Main {
    public static void main(String[] args) {
        Trie trie = new Trie();
        trie.insert("apple");
        System.out.println(trie.search("apple"));   // Debería imprimir true
        System.out.println(trie.search("app"));     // Debería imprimir false
        System.out.println(trie.startsWith("app")); // Debería imprimir true
        trie.insert("app");
        System.out.println(trie.search("app"));     // Debería imprimir true
        trie.delete("app");
        System.out.println(trie.search("app"));     // Debería imprimir false
        System.out.println(trie.startsWith("app")); // Debería imprimir true
    }
}
